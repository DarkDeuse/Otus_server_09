cmake_minimum_required(VERSION 3.2)

add_library(printer printer.h printer.cpp)
target_link_libraries(printer PRIVATE) 
set_target_properties(printer PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED ON)
target_include_directories(printer PRIVATE ${CMAKE_BINARY_DIR})

add_library(filePrinter FilePrinter.h FilePrinter.cpp)
target_link_libraries(printer PRIVATE) 
set_target_properties(filePrinter PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED ON)
target_include_directories(filePrinter PRIVATE ${CMAKE_BINARY_DIR})

add_library(consolePrinter ConsolePrinter.h ConsolePrinter.cpp)
target_link_libraries(printer PRIVATE ) 
set_target_properties(consolePrinter PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED ON)
target_include_directories(consolePrinter PRIVATE ${CMAKE_BINARY_DIR})

add_library(libinterpret STATIC lib_interpretor.cpp lib_interpretor.h)
target_link_libraries(libinterpret PRIVATE printer) 
set_target_properties(libinterpret  PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED ON)
target_include_directories(libinterpret PRIVATE ${CMAKE_BINARY_DIR})

add_library(libasync STATIC asyncedLib.cpp asyncedLib.h)
target_link_libraries(libasync PRIVATE libinterpret filePrinter consolePrinter printer) 
set_target_properties(libasync  PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED ON)
target_include_directories(libasync PRIVATE ${CMAKE_BINARY_DIR})

add_library(clientServer STATIC Client.cpp Client.h Server.cpp Server.h)
target_link_libraries(clientServer PRIVATE libasync) 
set_target_properties(clientServer  PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED ON)
target_include_directories(clientServer PRIVATE ${CMAKE_BINARY_DIR})

if(MSVC)
	target_compile_options(printer PRIVATE /W4)
	target_compile_options(filePrinter PRIVATE /W4)
	target_compile_options(consolePrinter PRIVATE /W4)
	target_compile_options(libinterpret PRIVATE /W4)
	target_compile_options(libasync PRIVATE /W4)
else()
	target_compile_options(printer PRIVATE -Wall -Wextra -Werror)
	target_compile_options(filePrinter PRIVATE -Wall -Wextra -Werror)
	target_compile_options(consolePrinter PRIVATE -Wall -Wextra -Werror)
	target_compile_options(libinterpret PRIVATE -Wall -Wextra -Werror)
	target_compile_options(libasync PRIVATE -Wall -Wextra -Werror)
endif()
